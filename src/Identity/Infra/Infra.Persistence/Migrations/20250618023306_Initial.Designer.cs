// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ServerGame.Infrastructure.Persistence.DbContexts;

#nullable disable

namespace ServerGame.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20250618023306_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("gameserver")
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("BaseEntitySequence");

            modelBuilder.Entity("ServerGame.Domain.Entities.BaseEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("nextval('gameserver.\"BaseEntitySequence\"')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<long>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("ServerGame.Domain.Entities.BaseAuditableEntity", b =>
                {
                    b.HasBaseType("ServerGame.Domain.Entities.BaseEntity");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.ToTable((string)null);
                });

            modelBuilder.Entity("ServerGame.Domain.Entities.Accounts.Account", b =>
                {
                    b.HasBaseType("ServerGame.Domain.Entities.BaseAuditableEntity");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer");

                    b.Property<string>("LastLoginInfo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("LastLoginInfo");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("UserId");

                    b.ToTable("Accounts", "gameserver");
                });

            modelBuilder.Entity("ServerGame.Domain.Entities.Accounts.Account", b =>
                {
                    b.OwnsOne("ServerGame.Domain.ValueObjects.Accounts.BanInfo", "BanInfo", b1 =>
                        {
                            b1.Property<long>("AccountId")
                                .HasColumnType("bigint");

                            b1.Property<long?>("BannedById")
                                .HasColumnType("bigint")
                                .HasColumnName("BannedById");

                            b1.Property<DateTime?>("ExpiresAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("BanExpiresAt");

                            b1.Property<string>("Reason")
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("BanReason");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("BanStatus");

                            b1.HasKey("AccountId");

                            b1.ToTable("Accounts", "gameserver");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.Navigation("BanInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
